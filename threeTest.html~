<!DOCTYPE html>
<html>
	<head>
		<meta charset=utf-8>
		<title>My first three.js app</title>
		<style>
			body { margin: 0; }
			canvas { width: 100%; height: 100%}
		</style>
		<form>
			<input type="button" onclick=window.open("index.html","_self") value="Back"/>
		</form>
	</head>
	<body>
		<button type='button' id="startTracking" >activate headtracking</button>
		<button type='button' id="startRotation" >activate rotations</button>
		<script src="js/three.js"></script>
		<script src="js/Geometry.js"></script>
		<script src="js/OrbitControls.js"></script>
		<script src="js/headtrackr.js"></script>
		<canvas id="inputCanvas" width="320" height="240" style="display:none"></canvas>
		<video id="inputVideo" autoplay loop></video>
		<script type="text/javascript">
			// Headtracking Stuff
			var videoInput = document.getElementById('inputVideo');
		  	var canvasInput = document.getElementById('inputCanvas');
			
			// start headtracking button
			var btn1 = document.getElementById('startTracking');
			var trackingOn=false;
			function activateTracking() {
				if (trackingOn){
					trackingOn=false;
					btn1.textContent="enable headtracking";
				}
				else {
					trackingOn=true;
					btn1.textContent="disable headtracking";
				}
			}
			btn1.onclick = activateTracking;

			var btn2 = document.getElementById('startRotation');
			var rotationOn=false;
			function activateRotation() {
				if (rotationOn){
					rotationOn=false;
					btn2.textContent="enable rotation";
				}
				else {
					rotationOn=true;
					btn2.textContent="disable rotation";
				}
			}
			btn2.onclick = activateRotation;

			//global variables for head position
			var camPos=[];
			camPos[0]=0;
			camPos[1]=0;
			camPos[2]=5;
			camPos[3]=1.5;
		  
			//init and start headtracker
		  	var htracker = new headtrackr.Tracker({calcAngles:true});
		  	htracker.init(videoInput, canvasInput);
		  	htracker.start();

			//average filter for smoothing head angle
			var filter=[];
			var filterLength=15;
			var filteredVal=1.5;
			for(var i=0;i<filterLength;i++){filter[i]=1.5;}
			function filterAv(angle){
				for(var i=filterLength-1;i>0;i--){
					filter[i]=filter[i-1]
				}
				filter[0]=angle;
				sum=0;
				for(var i=0;i<filterLength;i++){
					sum=sum+filter[i];

				}
				sum=sum/filterLength;
				return sum;
			}

			//receive and save tracked head position and angle 
			function htrackerReceived (e) {
				camPos[0]=e.x;
				camPos[1]=e.y;
				camPos[3]=e.angle;
			   	//console.log("x: " + e.x + " y: "+ e.y+" angle: "+e.angle)
				filteredVal=filterAv(e.angle);
				camPos[3]=filteredVal;
			}
			document.addEventListener("facetrackingEvent", htrackerReceived, false);

			// three.js init stuff
			var scene = new THREE.Scene();
			var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );

			var renderer = new THREE.WebGLRenderer();
			renderer.setClearColor(0xffffff);
			renderer.setSize( window.innerWidth, window.innerHeight );
			document.body.appendChild( renderer.domElement );

			// make cube
			var textureMetal = new THREE.ImageUtils.loadTexture('img/metal.jpg');
			var geometry = new THREE.BoxGeometry( 1, 2, 3 );
			var material = new THREE.MeshBasicMaterial( { map: textureMetal } );
			var cube = new THREE.Mesh( geometry, material );
			scene.add( cube );

			camera.position.z = 5;

			// add light
		  	var ambient_light = new THREE.AmbientLight(0xffffff, 0.5);
		    	scene.add(ambient_light);
		    	var point_light = new THREE.PointLight(0xffffff, 0.5);
		    	scene.add(point_light);

			// add mouse controls 
			var controls = new THREE.OrbitControls(camera, renderer.domElement);
			controls.center.set(0, 0, 0);
			controls.update(); 

			//update camera position according to headtracking
			function updateCamera () {
				if(trackingOn){
					camera.position.x = (0.5-camPos[0]/320)*5;
				   	camera.position.y = (0.5-camPos[1]/240)*5;
				}
				if(rotationOn) {camera.rotation.y =(camPos[3]-Math.PI/2)*2;}
			}

			// GEOMETRY
			import_background();
			import_object();

			//render loop
			function animate() {
				requestAnimationFrame( animate );
				cube.rotation.x += 0.01;
				if(trackingOn) updateCamera();
				renderer.render( scene, camera );
			}
			animate();
		</script>
	</body>
</html>
